Christopher Cai, Brian Chao


For our P3, the first thing that we did was implement the functions in symtable.cc. After testing those and verifying that they worked properly, we moved onto the class hierarchy. We started off at the top level, at ast_decl, where we realized that we needed to dynamically cast all declarations into VarDecls or FnDecls. There were certain considerations we had to take into, such as when there was a new function declaration we would need to declare a new scope. Also we had to take into consideration what scopes we are looking into when searching for a Symbol. For type checking, we created a new virtual function in ast_expr.h/cc that would return a Type pointer. This allowed us to get an expression's type to check if it is allowed. To prevent cascading errors, we passed in a boolean pointer that would be set whenever an error occurs. After finishing the type checking functionality in ast_expr.h/cc we updated our ast_decl.h/cc to include type checking for expressions as well. For ast_stmt.h/cc we also used type checking as well to make sure some expressions were certain types. For example, the for stmt test expression would need to be of type bool. Getting the return stmt to properly work was one of the more difficult challenges. We used two stacks. One stack kept track what return Type was expected. The other stack would keep track of if a function that has a return value returned the right value. To keep track of loop stmts and break/continue stmts, we also had a static int variable that kept track of the current amount of loops. The hardest part of this assignment was dealing with edge cases and paying attention to every detail. A null check slip can easily cause an annoying seg fault and keeping track of all the different classs' componenets was very difficult.